Problem:

Given a signed 32-bit integer x, return x with its digits reversed. 
If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.
Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

Example 1:
Input: x = 123
Output: 321

Example 2:
Input: x = -123
Output: -321

Example 3:
Input: x = 1534236469
Output: 0

Program:

class Solution:
    def reverse(self, x: int) -> int:
        max = pow(2,31)
        min = -pow(2,31)
        num = 0
        y = abs(x)
        while(y>0):
            rem = y%10
            y = y//10

            #Overflow when num>INT_MAX/10 and num<INT_MIN/10
            #Overflow when num = INT_MAX/10 and rem > 7
            if num > max/10 or (num == max/10 and rem >7):
                return 0
            
            #Overflow when num = INT_MIN/10 and rem < -8
            if num < min/10 or (num == min/10 and rem<-8):
                return 0
            else:
             num = num*10 + rem
        if x>0:
            return num
        else:
            return -num
